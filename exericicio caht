Seu c√≥digo tem a ideia correta de aplicar o **Strategy Pattern** para o c√°lculo de impostos, mas h√° **erros de sintaxe e organiza√ß√£o** que o impedem de compilar e funcionar corretamente.

Vamos corrigi-lo passo a passo:

---

### **Erros principais:**

1. **Interfaces e classes n√£o podem ser declaradas dentro de `main()`**:

   * O m√©todo `main` serve apenas para execu√ß√£o, n√£o para defini√ß√£o de tipos (interfaces/classes).

2. **`System.out.println()`** est√° fora de qualquer m√©todo v√°lido, o que n√£o √© permitido.

3. **Implementa√ß√µes como `ICMS` e `ISS` devem implementar corretamente o m√©todo `calcular`, retornando o valor do imposto.**

---

### ‚úÖ **Vers√£o Corrigida e Funcional:**

```java
// Aplica√ß√£o do Strategy Pattern para c√°lculo de impostos

// 1. Interface comum para estrat√©gias de imposto
interface ImpostoStrategy {
    double calcular(double valor);  // Contrato comum
}

// 2. Implementa√ß√µes concretas
class ICMS implements ImpostoStrategy {
    @Override
    public double calcular(double valor) {
        System.out.println("Calculando imposto ICMS");
        return valor * 0.18;  // Exemplo: 18%
    }
}

class ISS implements ImpostoStrategy {
    @Override
    public double calcular(double valor) {
        System.out.println("Calculando imposto ISS");
        return valor * 0.05;  // Exemplo: 5%
    }
}

// 3. Classe que utiliza a estrat√©gia
class CalculadoraImposto {
    double calcular(ImpostoStrategy imposto, double valor) {
        return imposto.calcular(valor);
    }
}

// 4. Classe principal
public class Main {
    public static void main(String[] args) {
        CalculadoraImposto calculadora = new CalculadoraImposto();

        double valorProduto = 1000.0;

        ImpostoStrategy icms = new ICMS();
        ImpostoStrategy iss = new ISS();

        double valorICMS = calculadora.calcular(icms, valorProduto);
        double valorISS = calculadora.calcular(iss, valorProduto);

        System.out.println("Valor ICMS: R$ " + valorICMS);
        System.out.println("Valor ISS: R$ " + valorISS);
    }
}
```

---

### üß† O que voc√™ aprendeu aqui:

* **Strategy Pattern** permite alterar o comportamento de c√°lculo dinamicamente.
* **Interface define o contrato**, e as **classes concretas implementam o comportamento espec√≠fico**.
* Boas pr√°ticas de Java exigem que classes e interfaces estejam fora do m√©todo `main`.

Se quiser, posso te mostrar tamb√©m como isso se aplicaria a **outros tipos de impostos** ou at√© com **inje√ß√£o de depend√™ncia** (por exemplo, usando Spring).
